Here's an updated `README.md` file that includes interactive icons and images for a more visually engaging experience. I've added icons for each section to make it easy to follow.

---

# Jenkins CI/CD Pipeline for Flask Application 🚀

![Workflow Diagram](workflow_diagram.png)

This repository provides a CI/CD pipeline configuration for deploying a Flask application using Jenkins. The pipeline automates environment setup, deployment, service management, testing, and Slack notifications.

## Table of Contents
- [Pipeline Overview 🛠️](#pipeline-overview-🛠️)
- [Setup Instructions ⚙️](#setup-instructions-⚙️)
- [Pipeline Configuration 🔧](#pipeline-configuration-🔧)
- [Triggers 🔄](#triggers-🔄)
- [Notifications 📢](#notifications-📢)

---

## Pipeline Overview 🛠️

The Jenkins pipeline automates the following steps:
1. **Setup Environment**: Installs Python dependencies, sets up a virtual environment, and installs necessary packages.
2. **Deploy Systemd Service**: Copies the `myapp.service` file to the systemd directory and enables the service.
3. **Start Gunicorn Service**: Starts the Flask application service.
4. **Testing**: Runs automated tests on the Flask application using `pytest`.
5. **Triggers**: Configured to automatically trigger a new build on code changes.
6. **Notifications**: Sends notifications to Slack upon build success or failure.

## Setup Instructions ⚙️

1. **Prerequisites**:
   - **Jenkins**: Install Jenkins on your server and configure a build node if needed.
   - **Slack Workspace**: Set up a Slack workspace and create a channel for notifications.
   - **GitHub Repository**: Host your code in a GitHub repository to enable webhook triggers.

2. **Install Plugins**:
   - Install the **Slack Notification Plugin** in Jenkins.

3. **Configure Slack**:
   - Go to **Manage Jenkins** > **Configure System** > **Slack**.
   - Enter your **Team Domain** and add a **Credential ID** for the Slack token.
   - Specify the **Default Channel** as `#jenkins-job-notifications`.

4. **Set Up GitHub Webhook**:
   - In your GitHub repository, go to **Settings > Webhooks**.
   - Click **Add webhook** and add your Jenkins URL followed by `/github-webhook/` (e.g., `http://your-jenkins-url/github-webhook/`).
   - Select **Push** events to trigger builds automatically.

## Pipeline Configuration 🔧

Here's an overview of the `Jenkinsfile` configuration:

```groovy
pipeline {
    agent { label 'Jenkins-worker01' }
    environment {
        APP_DIR = '/home/ubuntu/workspace/myapp'
        SERVICE_FILE = '/etc/systemd/system/myapp.service'
        VENV_PATH = "venv" 
    }

    stages {
        stage('Setup Environment') {
            steps {
                script {
                    try {
                        sh """
                            sudo apt-get update
                            sudo apt install python3-pip -y
                            sudo apt install python3-virtualenv -y
                            cd ${APP_DIR}
                            python3 -m venv $VENV_PATH
                            sudo chown -R ubuntu:ubuntu ${APP_DIR}/venv
                            ./$VENV_PATH/bin/pip install Flask gunicorn pytest requests
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Environment setup failed.")
                    }
                }
            }
        }

        stage('Deploy Systemd Service') {
            steps {
                script {
                    try {
                        sh """
                            sudo cp ${APP_DIR}/myapp.service ${SERVICE_FILE}
                            sudo systemctl daemon-reload
                            sudo systemctl enable myapp
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Deploying systemd service failed.")
                    }
                }
            }
        }

        stage('Start Gunicorn Service') {
            steps {
                script {
                    try {
                        sh """
                            sudo systemctl start myapp && sudo systemctl status myapp || true
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Starting Gunicorn service failed.")
                    }
                }
            }
        }

        stage('Testing') {
            steps {
                script {
                    try {
                        sh """
                            ./$VENV_PATH/bin/pytest tests.py
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Tests failed.")
                    }
                }
            }
        }
    }

    triggers {
        pollSCM('H/5 * * * *')  // Polls every 5 minutes for changes
    }

    post {
        always {
            script {
                if (currentBuild.result == 'SUCCESS') {
                    slackSend(channel: '#jenkins-job-notifications', message: "Build SUCCESS for myapp - Build #${env.BUILD_NUMBER}")
                } else {
                    slackSend(channel: '#jenkins-job-notifications', message: "Build FAILED for myapp - Build #${env.BUILD_NUMBER}")
                }
            }
        }
    }
}
```

## Triggers 🔄

The pipeline is set to automatically trigger on updates to the GitHub repository:

- **GitHub Webhook**: This is configured in GitHub, so Jenkins triggers a new build whenever there’s a push event.
- **Polling SCM**: Additionally, the `pollSCM('H/5 * * * *')` configuration polls for changes every 5 minutes to ensure no updates are missed.

## Notifications 📢

Slack notifications are configured to alert the `#jenkins-job-notifications` channel:

- **Success Message**: Notifies the channel when a build completes successfully.
- **Failure Message**: Alerts the channel if any step in the build process fails.

You’ll receive messages like:

- `"Build SUCCESS for myapp - Build #${env.BUILD_NUMBER}"`
- `"Build FAILED for myapp - Build #${env.BUILD_NUMBER}"`

---

This configuration ensures a fully automated and monitored CI/CD pipeline for deploying your Flask application! 🎉


![Alt text](images/slack_notification.png) 